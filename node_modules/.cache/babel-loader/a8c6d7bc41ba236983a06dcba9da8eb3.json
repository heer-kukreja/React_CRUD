{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error(\"Oops... Could not fetch your data. Try Again!\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsLoading(false);\n      setError(null);\n    }).catch(err => {\n      setIsLoading(false);\n      setError(err.message);\n    }), 1000);\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"oHNKtHcXBLfWEYHeRSlN5KEv5w0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/heer/githubrepos/my-blogs/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","setTimeout","fetch","then","res","ok","Error","json","catch","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,UAAU,CACNC,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACUC,GAAG,IAAI;AACT,UAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACP,cAAMC,KAAK,CAAC,+CAAD,CAAX;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANL,EAOKJ,IAPL,CAOWR,IAAD,IAAS;AACXC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAXL,EAYKQ,KAZL,CAYYC,GAAD,IAAS;AACZX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR;AACH,KAfL,CADM,EAiBA,IAjBA,CAAV;AAkBK,GAnBA,EAmBE,CAAChB,GAAD,CAnBF,CAAT;AAqBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CA3BD;;GAAMN,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setTimeout(\n            fetch(url)\n                .then(res => {\n                    if(!res.ok){\n                        throw Error(\"Oops... Could not fetch your data. Try Again!\");\n                    }\n                    return res.json();\n                })\n                .then((data) =>{\n                    setData(data);\n                    setIsLoading(false);\n                    setError(null);\n                })\n                .catch((err) => {\n                    setIsLoading(false);\n                    setError(err.message);\n                })\n                , 1000);\n            }, [url]);\n\n    return { data, isLoading, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}